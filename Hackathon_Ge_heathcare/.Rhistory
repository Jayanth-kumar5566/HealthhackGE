colnames(prediction) <- n
prediction$myfactor <- factor(row.names(prediction))
prediction<-prediction[1:123]
prediction<-as.matrix(prediction)
prediction
n_preds <- predict(bst,prediction,missing=NA)
n_preds
dim(prediction)
dim(prediction)[1]
n_predsmat <- matrix(n_preds,dim(prediction)[1],max(test_label)+1, byrow = T)
n_predsmat
n_predictedlab <- list()
for (i in 1:dim(prediction)[1]){n_predictedlab <- c(n_predictedlab,which(n_predsmat[i,]==max(n_predsmat[i,]))-1)}
print("Prediction of the Patient")
names(n_predictedlab)<-names[-1]
print(n_predictedlab)
n_predictedlab
max(n_predsmat)
max(n_predsmat[1,])
max(n_predsmat[2,])
max(n_predsmat[1,])
n_predictedlab
n_predsmat
require(data.table)
require(xgboost)
# Convert your data file into .csv format
filename <- "data.csv"
data <- read.csv("data.csv")
label<-read.csv("label.csv")
prediction<-read.csv("stage1_input.csv")
names<-strsplit(colnames(prediction),",")
#------------------------Transposing the Columns---------------------------
# first remember the names
n <- prediction$PATNO
# transpose all but the first column (name)
prediction <- as.data.frame(t(prediction[,-1]))
colnames(prediction) <- n
prediction$myfactor <- factor(row.names(prediction))
prediction<-prediction[1:123]
prediction<-as.matrix(prediction)
#---------------------------------------------------------------------------
data<-data.table(sapply(data,as.numeric))
label<-data.table(sapply(label,as.numeric))
data<-as.matrix(data)
label<-as.matrix(label)
set.seed(42)
n<-dim(data)[1]
trind<-sample(1:n,floor(.7*n),FALSE)
teind<-setdiff(1:n,trind)
tdata=data[teind,]
tlabel=label[teind,]#Actual data
data=data[trind,]
label=label[trind,]
#----------------------Training the Classifier-------------------------------
bst <- xgboost(data = data,label =label,eta =0.5,max.depth = 7, nround = 15,objective = "multi:softprob", num_class =max(label,na.rm=TRUE)+1 ,nthread = 3, verbose = 1,missing=NA)
# we input data as our testing set
test_data=tdata
test_label=tlabel
x=dim(test_data)[1]
preds <- predict(bst,test_data,missing=NA) # returns probabilities of each label
# needs to find max probability label for each dataline
predsmat <- matrix(preds,x,max(test_label)+1, byrow = T)
predictedlab <- list()
for (i in 1:x){predictedlab <- c(predictedlab,which(predsmat[i,]==max(predsmat[i,]))-1)}
print("Confusion Matrix for the Testing Set")
table(unlist(predictedlab),tlabel)
#-------------------Variable importance plot----------------------------------
print("Saving variable Importance Plot")
importance_matrix<-xgb.importance(colnames(data),model=bst,data=data,label=label)
library("Ckmeans.1d.dp", lib.loc="/home/jhome/R/x86_64-pc-linux-gnu-library/3.1")
xgb.plot.importance(importance_matrix[1:45])
#----------------Prediction from the table------------------------------------
n_preds <- predict(bst,prediction,missing=NA)
n_predsmat <- matrix(n_preds,dim(prediction)[1],max(test_label)+1, byrow = T)
n_predictedlab <- list()
for (i in 1:dim(prediction)[1]){n_predictedlab <- c(n_predictedlab,which(n_predsmat[i,]==max(n_predsmat[i,]))-1)}
print("Prediction of the Patient")
names(n_predictedlab)<-names[-1]
print(n_predictedlab)
n_predsmat <- matrix(n_preds,dim(prediction)[1],max(test_label), byrow = T)
n_preds
label
length(label)
max(label)
predsmat
require(data.table)
require(xgboost)
# Convert your data file into .csv format
filename <- "data.csv"
data <- read.csv("data.csv")
label<-read.csv("label.csv")
prediction<-read.csv("stage1_input.csv")
names<-strsplit(colnames(prediction),",")
#------------------------Transposing the Columns---------------------------
# first remember the names
n <- prediction$PATNO
# transpose all but the first column (name)
prediction <- as.data.frame(t(prediction[,-1]))
colnames(prediction) <- n
prediction$myfactor <- factor(row.names(prediction))
prediction<-prediction[1:123]
prediction<-as.matrix(prediction)
#---------------------------------------------------------------------------
data<-data.table(sapply(data,as.numeric))
label<-data.table(sapply(label,as.numeric))
data<-as.matrix(data)
label<-as.matrix(label)
set.seed(42)
n<-dim(data)[1]
trind<-sample(1:n,floor(.7*n),FALSE)
teind<-setdiff(1:n,trind)
tdata=data[teind,]
tlabel=label[teind,]#Actual data
data=data[trind,]
label=label[trind,]
#----------------------Training the Classifier-------------------------------
bst <- xgboost(data = data,label =label,eta =0.5,max.depth = 7, nround = 15,objective = "multi:softprob", num_class =max(label,na.rm=TRUE)+1 ,nthread = 3, verbose = 1,missing=NA)
label
n_preds <- predict(bst,prediction,missing=NA)
n_preds
?n_preds
??n_preds
?predict
dim(train)
dim(data)
dim(label)
dim(label)
?xgboost
length(label)
n_preds <- predict(bst,prediction,missing=NA)
prediction
dim(prediction)
n_preds
prediction.T
prediction.T()
data
n_preds
bst <- xgboost(data = data,label =label,eta =0.5,max.depth = 7, nround = 15,objective = "multi:softprob", num_class =max(label,na.rm=TRUE)+1 ,nthread = 3, verbose = 1,missing=NA)
# we input data as our testing set
test_data=tdata
test_label=tlabel
x=dim(test_data)[1]
preds <- predict(bst,test_data,missing=NA) # returns probabilities of each label
preds
predsmat <- matrix(preds,x,max(test_label)+1, byrow = T)
predsmat
n_preds <- predict(bst,prediction,missing=NA)
n_predsmat <- matrix(n_preds,dim(prediction)[1],max(test_label)+1, byrow = T)
n_predictedlab <- list()
for (i in 1:dim(prediction)[1]){n_predictedlab <- c(n_predictedlab,which(n_predsmat[i,]==max(n_predsmat[i,]))-1)}
n_predictedlab
n_predictedlab
?which
which(n_predsmat[i,]==max(n_predsmat[i,]))-1
n_predsmat[i,]
n_predsmat
n_predsmat[1,]
which(n_predsmat[1,]==max(n_predsmat[1,]))
which(n_predsmat[1,]==max(n_predsmat[1,]))-1
n_predsmat
type(n_predsmat)
class(n_predsmat)
n_preds <- predict(bst,prediction,missing=NA)
n_predsmat <- matrix(n_preds,dim(prediction)[1],max(test_label)+1, byrow = T)
n_predictedlab <- list()
write.csv(n_predictedlab,file="scores.csv")
for (i in 1:dim(prediction)[1]){n_predictedlab <- c(n_predictedlab,which(n_predsmat[i,]==max(n_predsmat[i,]))-1)}
print("Prediction of the Patient")
names(n_predictedlab)<-names[-1]
print(n_predictedlab)
write.csv(n_predsmat,file="scores.csv")
require(data.table)
require(xgboost)
# Convert your data file into .csv format
filename <- "data.csv"
data <- read.csv("data.csv")
label<-read.csv("label.csv")
prediction<-read.csv("stage1_input.csv")
names<-strsplit(colnames(prediction),",")
#------------------------Transposing the Columns---------------------------
# first remember the names
n <- prediction$PATNO
# transpose all but the first column (name)
prediction <- as.data.frame(t(prediction[,-1]))
colnames(prediction) <- n
prediction$myfactor <- factor(row.names(prediction))
prediction<-prediction[1:123]
prediction<-as.matrix(prediction)
#---------------------------------------------------------------------------
data<-data.table(sapply(data,as.numeric))
label<-data.table(sapply(label,as.numeric))
data<-as.matrix(data)
label<-as.matrix(label)
set.seed(42)
n<-dim(data)[1]
trind<-sample(1:n,floor(.7*n),FALSE)
teind<-setdiff(1:n,trind)
tdata=data[teind,]
tlabel=label[teind,]#Actual data
data=data[trind,]
label=label[trind,]
#----------------------Training the Classifier-------------------------------
bst <- xgboost(data = data,label =label,eta =0.5,max.depth = 7, nround = 15,objective = "multi:softprob", num_class =max(label,na.rm=TRUE)+1 ,nthread = 3, verbose = 1,missing=NA)
# we input data as our testing set
test_data=tdata
test_label=tlabel
x=dim(test_data)[1]
preds <- predict(bst,test_data,missing=NA) # returns probabilities of each label
# needs to find max probability label for each dataline
predsmat <- matrix(preds,x,max(test_label)+1, byrow = T)
predictedlab <- list()
for (i in 1:x){predictedlab <- c(predictedlab,which(predsmat[i,]==max(predsmat[i,]))-1)}
print("Confusion Matrix for the Testing Set")
table(unlist(predictedlab),tlabel)
#-------------------Variable importance plot----------------------------------
print("Saving variable Importance Plot")
importance_matrix<-xgb.importance(colnames(data),model=bst,data=data,label=label)
library("Ckmeans.1d.dp", lib.loc="/home/jhome/R/x86_64-pc-linux-gnu-library/3.1")
xgb.plot.importance(importance_matrix[1:45])
#----------------Prediction from the table------------------------------------
n_preds <- predict(bst,prediction,missing=NA)
n_predsmat <- matrix(n_preds,dim(prediction)[1],max(test_label)+1, byrow = T)
n_predictedlab <- list()
write.csv(n_predsmat,file="scores.csv")
for (i in 1:dim(prediction)[1]){n_predictedlab <- c(n_predictedlab,which(n_predsmat[i,]==max(n_predsmat[i,]))-1)}
print("Prediction of the Patient")
names(n_predictedlab)<-names[-1]
print(n_predictedlab)
require(data.table)
require(xgboost)
# Convert your data file into .csv format
filename <- "data.csv"
data <- read.csv("data.csv")
label<-read.csv("label.csv")
prediction<-read.csv("stage1_input.csv")
names<-strsplit(colnames(prediction),",")
#------------------------Transposing the Columns---------------------------
# first remember the names
n <- prediction$PATNO
# transpose all but the first column (name)
prediction <- as.data.frame(t(prediction[,-1]))
colnames(prediction) <- n
prediction$myfactor <- factor(row.names(prediction))
prediction<-prediction[1:123]
prediction<-as.matrix(prediction)
#---------------------------------------------------------------------------
data<-data.table(sapply(data,as.numeric))
label<-data.table(sapply(label,as.numeric))
data<-as.matrix(data)
label<-as.matrix(label)
set.seed(42)
n<-dim(data)[1]
trind<-sample(1:n,floor(.7*n),FALSE)
teind<-setdiff(1:n,trind)
tdata=data[teind,]
tlabel=label[teind,]#Actual data
data=data[trind,]
label=label[trind,]
#----------------------Training the Classifier-------------------------------
bst <- xgboost(data = data,label =label,eta =0.5,max.depth = 7, nround = 15,objective = "multi:softprob", num_class =max(label,na.rm=TRUE)+1 ,nthread = 3, verbose = 1,missing=NA)
# we input data as our testing set
test_data=tdata
test_label=tlabel
x=dim(test_data)[1]
preds <- predict(bst,test_data,missing=NA) # returns probabilities of each label
# needs to find max probability label for each dataline
predsmat <- matrix(preds,x,max(test_label)+1, byrow = T)
predictedlab <- list()
for (i in 1:x){predictedlab <- c(predictedlab,which(predsmat[i,]==max(predsmat[i,]))-1)}
print("Confusion Matrix for the Testing Set")
table(unlist(predictedlab),tlabel)
#-------------------Variable importance plot----------------------------------
print("Saving variable Importance Plot")
importance_matrix<-xgb.importance(colnames(data),model=bst,data=data,label=label)
library("Ckmeans.1d.dp", lib.loc="/home/jhome/R/x86_64-pc-linux-gnu-library/3.1")
xgb.plot.importance(importance_matrix[1:45])
#----------------Prediction from the table------------------------------------
n_preds <- predict(bst,prediction,missing=NA)
n_predsmat <- matrix(n_preds,dim(prediction)[1],max(test_label)+1, byrow = T)
n_predictedlab <- list()
write.csv(n_predsmat,file="scores.csv")
for (i in 1:dim(prediction)[1]){n_predictedlab <- c(n_predictedlab,which(n_predsmat[i,]==max(n_predsmat[i,]))-1)}
print("Prediction of the Patient")
names(n_predictedlab)<-names[-1]
print(n_predictedlab)
require(data.table)
require(xgboost)
# Convert your data file into .csv format
filename <- "data.csv"
data <- read.csv("data.csv")
label<-read.csv("label.csv")
prediction<-read.csv("stage1_input.csv")
names<-strsplit(colnames(prediction),",")
#------------------------Transposing the Columns---------------------------
# first remember the names
n <- prediction$PATNO
# transpose all but the first column (name)
prediction <- as.data.frame(t(prediction[,-1]))
colnames(prediction) <- n
prediction$myfactor <- factor(row.names(prediction))
prediction<-prediction[1:123]
prediction<-as.matrix(prediction)
#---------------------------------------------------------------------------
data<-data.table(sapply(data,as.numeric))
label<-data.table(sapply(label,as.numeric))
data<-as.matrix(data)
label<-as.matrix(label)
set.seed(42)
n<-dim(data)[1]
trind<-sample(1:n,floor(.7*n),FALSE)
teind<-setdiff(1:n,trind)
tdata=data[teind,]
tlabel=label[teind,]#Actual data
data=data[trind,]
label=label[trind,]
#----------------------Training the Classifier-------------------------------
bst <- xgboost(data = data,label =label,eta =0.5,max.depth = 7, nround = 15,objective = "multi:softprob", num_class =max(label,na.rm=TRUE)+1 ,nthread = 3, verbose = 1,missing=NA)
# we input data as our testing set
test_data=tdata
test_label=tlabel
x=dim(test_data)[1]
preds <- predict(bst,test_data,missing=NA) # returns probabilities of each label
# needs to find max probability label for each dataline
predsmat <- matrix(preds,x,max(test_label)+1, byrow = T)
predictedlab <- list()
for (i in 1:x){predictedlab <- c(predictedlab,which(predsmat[i,]==max(predsmat[i,]))-1)}
print("Confusion Matrix for the Testing Set")
table(unlist(predictedlab),tlabel)
#-------------------Variable importance plot----------------------------------
print("Saving variable Importance Plot")
importance_matrix<-xgb.importance(colnames(data),model=bst,data=data,label=label)
library("Ckmeans.1d.dp", lib.loc="/home/jhome/R/x86_64-pc-linux-gnu-library/3.1")
xgb.plot.importance(importance_matrix[1:45])
#----------------Prediction from the table------------------------------------
n_preds <- predict(bst,prediction,missing=NA)
n_predsmat <- matrix(n_preds,dim(prediction)[1],max(test_label)+1, byrow = T)
n_predictedlab <- list()
write.csv(n_predsmat,file="scores.csv")
for (i in 1:dim(prediction)[1]){n_predictedlab <- c(n_predictedlab,which(n_predsmat[i,]==max(n_predsmat[i,]))-1)}
print("Prediction of the Patient")
names(n_predictedlab)<-names[-1]
print(n_predictedlab)
require(data.table)
require(xgboost)
# Convert your data file into .csv format
filename <- "data.csv"
data <- read.csv("to_calc_ps.csv")
label<-read.csv("label.csv")
prediction<-read.csv("stage1_input.csv")
names<-strsplit(colnames(prediction),",")
#------------------------Transposing the Columns---------------------------
# first remember the names
n <- prediction$PATNO
# transpose all but the first column (name)
prediction <- as.data.frame(t(prediction[,-1]))
colnames(prediction) <- n
prediction$myfactor <- factor(row.names(prediction))
prediction<-prediction[1:123]
prediction<-as.matrix(prediction)
#---------------------------------------------------------------------------
data<-data.table(sapply(data,as.numeric))
label<-data.table(sapply(label,as.numeric))
data<-as.matrix(data)
label<-as.matrix(label)
set.seed(42)
n<-dim(data)[1]
trind<-sample(1:n,floor(.7*n),FALSE)
teind<-setdiff(1:n,trind)
tdata=data[teind,]
tlabel=label[teind,]#Actual data
data=data[trind,]
label=label[trind,]
#----------------------Training the Classifier-------------------------------
bst <- xgboost(data = data,label =label,eta =0.5,max.depth = 7, nround = 15,objective = "multi:softprob", num_class =max(label,na.rm=TRUE)+1 ,nthread = 3, verbose = 1,missing=NA)
# we input data as our testing set
test_data=tdata
test_label=tlabel
x=dim(test_data)[1]
preds <- predict(bst,test_data,missing=NA) # returns probabilities of each label
# needs to find max probability label for each dataline
predsmat <- matrix(preds,x,max(test_label)+1, byrow = T)
predictedlab <- list()
for (i in 1:x){predictedlab <- c(predictedlab,which(predsmat[i,]==max(predsmat[i,]))-1)}
print("Confusion Matrix for the Testing Set")
table(unlist(predictedlab),tlabel)
#-------------------Variable importance plot----------------------------------
print("Saving variable Importance Plot")
importance_matrix<-xgb.importance(colnames(data),model=bst,data=data,label=label)
library("Ckmeans.1d.dp", lib.loc="/home/jhome/R/x86_64-pc-linux-gnu-library/3.1")
xgb.plot.importance(importance_matrix[1:45])
#----------------Prediction from the table------------------------------------
n_preds <- predict(bst,prediction,missing=NA)
n_predsmat <- matrix(n_preds,dim(prediction)[1],max(test_label)+1, byrow = T)
n_predictedlab <- list()
write.csv(n_predsmat,file="scores.csv")
for (i in 1:dim(prediction)[1]){n_predictedlab <- c(n_predictedlab,which(n_predsmat[i,]==max(n_predsmat[i,]))-1)}
print("Prediction of the Patient")
names(n_predictedlab)<-names[-1]
print(n_predictedlab)
require(data.table)
require(xgboost)
# Convert your data file into .csv format
filename <- "data.csv"
data <- read.csv("data.csv")
label<-read.csv("label.csv")
prediction<-read.csv("stage1_input.csv")
names<-strsplit(colnames(prediction),",")
#------------------------Transposing the Columns---------------------------
# first remember the names
n <- prediction$PATNO
# transpose all but the first column (name)
prediction <- as.data.frame(t(prediction[,-1]))
colnames(prediction) <- n
prediction$myfactor <- factor(row.names(prediction))
prediction<-prediction[1:123]
prediction<-as.matrix(prediction)
#---------------------------------------------------------------------------
data<-data.table(sapply(data,as.numeric))
label<-data.table(sapply(label,as.numeric))
data<-as.matrix(data)
label<-as.matrix(label)
set.seed(42)
n<-dim(data)[1]
trind<-sample(1:n,floor(.7*n),FALSE)
teind<-setdiff(1:n,trind)
tdata=data[teind,]
tlabel=label[teind,]#Actual data
data=data[trind,]
label=label[trind,]
#----------------------Training the Classifier-------------------------------
bst <- xgboost(data = data,label =label,eta =0.5,max.depth = 7, nround = 15,objective = "multi:softprob", num_class =max(label,na.rm=TRUE)+1 ,nthread = 3, verbose = 1,missing=NA)
# we input data as our testing set
saveRDS(bst,"model_v1.rds")
length(prediction)
prediction<-read.csv("stage1_input.csv")
length(prediction)
prediction
prediction.shape
prediction.size
size(prediction)
dim(prediction)
dim(prediction)[0]
dim(prediction)[1]
bst<-readRDS("model_v1.rds")
prediction<-read.csv("stage1_input.csv")
x<-dim(prediction)[1]
names<-strsplit(colnames(prediction),",")
#------------------------Transposing the Columns---------------------------
# first remember the names
n <- prediction$PATNO
# transpose all but the first column (name)
prediction <- as.data.frame(t(prediction[,-1]))
colnames(prediction) <- n
prediction$myfactor <- factor(row.names(prediction))
prediction<-prediction[1:x]
prediction<-as.matrix(prediction)
n_preds <- predict(bst,prediction,missing=NA)
class(bst)
bst<-readRDS("model_v1.rds")
prediction<-read.csv("stage1_input.csv")
x<-dim(prediction)[1]
names<-strsplit(colnames(prediction),",")
#------------------------Transposing the Columns---------------------------
# first remember the names
n <- prediction$PATNO
# transpose all but the first column (name)
prediction <- as.data.frame(t(prediction[,-1]))
colnames(prediction) <- n
prediction$myfactor <- factor(row.names(prediction))
prediction<-prediction[1:x]
prediction<-as.matrix(prediction)
n_preds <- predict(bst,prediction,missing=NA)
predict(bst,prediction)
library(xgboost)
predict(bst,prediction)
library(xgboost)
bst<-readRDS("model_v1.rds")
prediction<-read.csv("stage1_input.csv")
x<-dim(prediction)[1]
names<-strsplit(colnames(prediction),",")
#------------------------Transposing the Columns---------------------------
# first remember the names
n <- prediction$PATNO
# transpose all but the first column (name)
prediction <- as.data.frame(t(prediction[,-1]))
colnames(prediction) <- n
prediction$myfactor <- factor(row.names(prediction))
prediction<-prediction[1:x]
prediction<-as.matrix(prediction)
n_preds <- predict(bst,prediction,missing=NA)
n_predsmat <- matrix(n_preds,dim(prediction)[1],max(test_label)+1, byrow = T)
n_predictedlab <- list()
write.csv(n_predsmat,file="scores.csv")
for (i in 1:dim(prediction)[1]){n_predictedlab <- c(n_predictedlab,which(n_predsmat[i,]==max(n_predsmat[i,]))-1)}
print("Prediction of the Patient")
names(n_predictedlab)<-names[-1]
print(n_predictedlab)
library(xgboost)
bst<-readRDS("model_v1.rds")
prediction<-read.csv("stage1_input.csv")
x<-dim(prediction)[1]
names<-strsplit(colnames(prediction),",")
#------------------------Transposing the Columns---------------------------
# first remember the names
n <- prediction$PATNO
# transpose all but the first column (name)
prediction <- as.data.frame(t(prediction[,-1]))
colnames(prediction) <- n
prediction$myfactor <- factor(row.names(prediction))
prediction<-prediction[1:x]
prediction<-as.matrix(prediction)
n_preds <- predict(bst,prediction,missing=NA)
